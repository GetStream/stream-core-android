# .github/workflows/pr-checklist.yml
name: PR Quality check

on:
  pull_request_target:
    types: [opened, edited, synchronize, labeled, unlabeled, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  # Hidden marker to always find/update the same comment
  PR_CHECKLIST_ANCHOR: "<!-- pr-checklist-anchor -->"
  # Title bypass label for release-notes length rule
  TITLE_BYPASS_LABEL: "pr:ignore-for-release"
  # Title word limits (for release notes)
  MIN_TITLE_WORDS: "5"
  MAX_TITLE_WORDS: "12"

jobs:
  pr-checklist:
    runs-on: ubuntu-latest

    steps:
      - name: Validate PR
        id: validate
        env:
          TITLE: ${{ github.event.pull_request.title }}
          BODY: ${{ github.event.pull_request.body }}
          LABELS_CSV: ${{ join(github.event.pull_request.labels.*.name, ',') }}
          MIN_WORDS: ${{ env.MIN_TITLE_WORDS }}
          MAX_WORDS: ${{ env.MAX_TITLE_WORDS }}
          BYPASS:    ${{ env.TITLE_BYPASS_LABEL }}
        run: |
          set -euo pipefail

          failures=""

          has_label () {
            case ",${LABELS_CSV}," in
              *,"$1",*) return 0 ;;
              *) return 1 ;;
            esac
          }

          has_any_pr_label () {
            IFS=',' read -ra LBL <<< "${LABELS_CSV}"
            for l in "${LBL[@]}"; do
              l="$(echo "$l" | xargs)"
              [[ $l == pr:* ]] && return 0
            done
            return 1
          }

          # ---- 1) Title length (unless bypass label present)
          if ! has_label "$BYPASS"; then
            title_words=$(echo "$TITLE" | tr -s '[:space:]' ' ' | sed -e 's/^ *//' -e 's/ *$//' | wc -w | xargs || true)
            if [ -z "${title_words:-}" ]; then title_words=0; fi
            if [ "$title_words" -lt "$MIN_WORDS" ] || [ "$title_words" -gt "$MAX_WORDS" ]; then
              failures="${failures}\n- **Title** should be concise for release notes: ${MIN_WORDS}‚Äì${MAX_WORDS} words. Current: ${title_words}. (Add \`$BYPASS\` to bypass.)"
            fi
          fi

          # ---- 2) At least one pr:* label
          if ! has_any_pr_label; then
            failures="${failures}\n- Missing required label: at least one \`pr:\` label (e.g., \`pr:new-feature\`, \`pr:bug\`)."
          fi

          # ---- 3) Required sections (### headers): Goal / Implementation / Testing
          BODY="${BODY:-}"

          section_nonempty () {
            # Extract text under '### <Header>' until next '###' (or end)
            local hdr="$1"
            local section
            section="$(printf "%s" "$BODY" | awk -v h="^###[[:space:]]*$hdr[[:space:]]*$" '
              BEGIN { insec=0 }
              $0 ~ h { insec=1; next }
              insec && $0 ~ /^###[[:space:]]/ { insec=0 }
              insec { print }
            ')"
            # Strip HTML comments and whitespace-only lines
            section="$(printf "%s" "$section" \
              | sed -E 's/<!--(.|\n)*?-->//g' \
              | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' \
              | sed '/^[[:space:]]*$/d')"
            [ -n "$section" ]
          }

          for hdr in Goal Implementation Testing; do
            if ! section_nonempty "$hdr"; then
              failures="${failures}\n- Section **${hdr}** is missing or empty (use \`### ${hdr}\` with some content)."
            fi
          done

          if [ -n "$failures" ]; then
            echo "has_failures=true" >> "$GITHUB_OUTPUT"
            {
              echo 'failures<<EOF'
              printf "%b\n" "$failures"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            # Fail job to block merging if branch protection requires this check
            exit 1
          else
            echo "has_failures=false" >> "$GITHUB_OUTPUT"
          fi

      # Find sticky comment by anchor (no author filter ‚Üí works for forks)
      - name: Find PR Checklist comment
        id: find_comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: ${{ env.PR_CHECKLIST_ANCHOR }}
          direction: last

      # Post or update the sticky comment to ‚ùå with details
      - name: Create or update failure comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            <!-- pr-checklist-anchor -->
            ### PR Checklist ‚ùå

            The following issues were detected:

            ${{ steps.validate.outputs.failures }}

            **We check**
            1. Title is concise (**${{ env.MIN_TITLE_WORDS }}‚Äì${{ env.MAX_TITLE_WORDS }} words**) unless labeled `pr:ignore-for-release`.
            2. At least one `pr:` label exists.
            3. Sections `### Goal`, `### Implementation`, and `### Testing` contain content.

            _This comment updates automatically when you edit the PR title/body or labels._

      # Flip the same sticky comment to ‚úÖ when everything passes
      - name: Create or update success comment
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            <!-- pr-checklist-anchor -->
            ### PR Checklist ‚úÖ

            All required conditions are satisfied:
            - Title length is OK (or ignored via `pr:ignore-for-release`).
            - At least one `pr:` label exists.
            - Sections `### Goal`, `### Implementation`, and `### Testing` are filled.

            üéâ Looks good!
