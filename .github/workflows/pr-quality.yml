# .github/workflows/pr-quality-check.yml
name: PR Quality check

on:
  pull_request:
    types: [opened, edited, synchronize, labeled, unlabeled, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-quality:
    runs-on: ubuntu-latest

    steps:
      - name: Validate PR quality
        id: validate
        env:
          TITLE: ${{ github.event.pull_request.title }}
          BODY: ${{ github.event.pull_request.body }}
          LABELS_CSV: ${{ join(github.event.pull_request.labels.*.name, ',') }}
        run: |
          set -euo pipefail

          failures=""

          # ---- Settings ----
          MIN_WORDS=3
          MAX_WORDS=12
          TITLE_BYPASS_LABEL="pr:ignore-for-release"

          has_label () {
            case ",${LABELS_CSV}," in
              *,"$1",*) return 0 ;;
              *) return 1 ;;
            esac
          }

          has_any_pr_label () {
            IFS=',' read -ra LBL <<< "${LABELS_CSV}"
            for l in "${LBL[@]}"; do
              l="$(echo "$l" | xargs)"
              [[ $l == pr:* ]] && return 0
            done
            return 1
          }

          # --- 1) Title check
          if ! has_label "$TITLE_BYPASS_LABEL"; then
            title_words=$(echo "$TITLE" | tr -s '[:space:]' ' ' | sed -e 's/^ *//' -e 's/ *$//' | wc -w | xargs)
            if [ -z "$title_words" ]; then title_words=0; fi
            if [ "$title_words" -lt "$MIN_WORDS" ] || [ "$title_words" -gt "$MAX_WORDS" ]; then
              failures="${failures}\n- **Title** should be ${MIN_WORDS}‚Äì${MAX_WORDS} words for release notes. Current: ${title_words} word(s). (Add \`${TITLE_BYPASS_LABEL}\` to bypass.)"
            fi
          fi

          # --- 2) Has pr:* label
          if ! has_any_pr_label; then
            failures="${failures}\n- Missing required label: at least one label starting with \`pr:\`."
          fi

          # --- 3) Sections non-empty
          section_nonempty () {
            local hdr="$1"
            local section
            section="$(printf "%s" "$BODY" | awk -v h="^##[[:space:]]*$hdr[[:space:]]*$" '
              BEGIN { insec=0 }
              $0 ~ h { insec=1; next }
              insec && $0 ~ /^##[[:space:]]/ { insec=0 }
              insec { print }
            ')"
            section="$(printf "%s" "$section" \
              | sed -E 's/<!--(.|\n)*?-->//g' \
              | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' \
              | sed '/^[[:space:]]*$/d')"
            [ -n "$section" ]
          }

          for hdr in Goal Implementation Testing; do
            if ! section_nonempty "$hdr"; then
              failures="${failures}\n- Section **${hdr}** is missing or empty."
            fi
          done

          if [ -n "$failures" ]; then
            echo "has_failures=true" >> "$GITHUB_OUTPUT"
            {
              echo 'failures<<EOF'
              printf "%b\n" "$failures"
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "has_failures=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Find existing PR Quality Check comment
        id: find_comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: github-actions[bot]
          body-includes: "### PR Quality Check"

      - name: Create or update failure comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ### PR Quality Check ‚ùå Failed

            The following issues were detected:

            ${{ steps.validate.outputs.failures }}

            **What we check**
            1. Title is concise (3‚Äì12 words) unless labeled `pr:ignore-for-release`.
            2. At least one `pr:` label exists (e.g., `pr:bug`, `pr:new-feature`).
            3. Sections `## Goal`, `## Implementation`, and `## Testing` contain content.

            _This comment updates automatically when you edit the PR title/body or labels._

      - name: Create or update success comment
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ### PR Quality Check ‚úÖ Passed

            All required conditions are satisfied:
            - Title length is OK (or ignored by label).
            - At least one `pr:` label exists.
            - Sections `## Goal`, `## Implementation`, and `## Testing` are filled.

            üéâ Great job! This PR is ready for review.
